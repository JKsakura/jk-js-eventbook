{"notes":[{"id":0,"title":"constructor","category":0,"subcategory":4,"introduction":"Returns the function that created the Array object's prototype","syntax":"<p><strong>The constructor property returns an array&#39;s constructor function:</strong></p><p>var&nbsp;fruits = [&quot;Banana&quot;,&nbsp;&quot;Orange&quot;,&nbsp;&quot;Apple&quot;,&nbsp;&quot;Mango&quot;];<br />fruits.constructor;</p>","description":"<p><strong>Definition and Usage</strong></p><p>In JavaScript, the constructor property returns the constructor function for an object.</p><p>The return value is a reference to the function, not the name of the function:</p><p>For JavaScript&nbsp;<strong>arrays</strong>&nbsp;the constructor property returns&nbsp;<strong>function Array() { [native code] }</strong></p><p>For JavaScript&nbsp;<strong>numbers</strong>&nbsp;the constructor property returns&nbsp;<strong>function Number() { [native code] }</strong></p><p>For JavaScript&nbsp;<strong>strings</strong>&nbsp;the constructor property returns&nbsp;<strong>function String() { [native code] }</strong></p><p>You can use the constructor property to define if a variable is an array.</p>","created":"2018-04-27T03:37:06.044Z"},{"id":1,"title":"length","category":0,"subcategory":4,"introduction":"Sets or returns the number of elements in an array","syntax":"<p><strong>Return the length of an array:</strong></p><p>var&nbsp;fruits = [&quot;Banana&quot;,&nbsp;&quot;Orange&quot;,&nbsp;&quot;Apple&quot;,&nbsp;&quot;Mango&quot;];<br />fruits.length;</p>","description":"<p><strong>Definition and Usage</strong></p><p>The length property sets or returns the number of elements in an array.</p>","created":"2018-04-27T03:38:00.090Z"},{"id":2,"title":"prototype","category":0,"subcategory":4,"introduction":"Allows you to add properties and methods to an Array object","syntax":"<p><strong>Make a new array method that transforms array values into upper case:</strong></p><p>Array.prototype.myUcase&nbsp;=&nbsp;function() {<br />&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(i =&nbsp;0; i &lt;&nbsp;this.length; i++) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this[i] =&nbsp;this[i].toUpperCase();<br />&nbsp;&nbsp;&nbsp; }<br />};</p><p><strong>Make an array, then call the myUcase method:</strong></p><p>var&nbsp;fruits = [&quot;Banana&quot;,&nbsp;&quot;Orange&quot;,&nbsp;&quot;Apple&quot;,&nbsp;&quot;Mango&quot;];<br />fruits.myUcase();</p>","description":"<p><strong>Definition and Usage</strong></p><p>The prototype constructor allows you to add new properties and methods to the Array() object.</p><p>When constructing a property, ALL arrays will be given the property, and its value, as default.</p><p>When constructing a method, ALL arrays will have this method available.</p><p><strong>Note:</strong>&nbsp;Array.prototype does not refer to a single array, but to the Array() object itself.</p><p><strong>Note:</strong>&nbsp;Prototype is a global object constructor which is available for all JavaScript objects.</p>","created":"2018-04-27T03:38:43.876Z"},{"id":3,"title":"constructor","category":0,"subcategory":5,"introduction":"Returns the function that created JavaScript's Boolean prototype","syntax":"<p><strong>The constructor property returns a booleans&#39;s constructor function:</strong></p><p>var&nbsp;bool =&nbsp;false;</p>","description":"<p><strong>Definition and Usage</strong></p><p>In JavaScript, the constructor property returns the constructor function for an object.</p><p>The return value is a reference to the function, not the name of the function:</p><p>For JavaScript&nbsp;<strong>numbers</strong>&nbsp;the constructor property returns&nbsp;<strong>function Number() { [native code] }</strong></p><p>For JavaScript&nbsp;<strong>strings</strong>&nbsp;the constructor property returns&nbsp;<strong>function String() { [native code] }</strong></p><p>For JavaScript&nbsp;<strong>booleans</strong>&nbsp;the constructor property returns&nbsp;<strong>function Boolean() { [native code] }</strong></p>","created":"2018-04-27T03:39:35.631Z"},{"id":4,"title":"prototype","category":0,"subcategory":5,"introduction":"Allows you to add properties and methods to the Boolean prototype","syntax":"<p><strong>Make a new method for JavaScript booleans:</strong></p><p>Boolean.prototype.myColor&nbsp;=&nbsp;function() {<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.valueOf() ==&nbsp;true) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;green&quot;;<br />&nbsp;&nbsp;&nbsp; }&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;=&nbsp;&quot;red&quot;;<br />&nbsp;&nbsp;&nbsp; }<br />};</p><p><strong>Create a boolean, then call myColor():</strong></p><p>var&nbsp;a =&nbsp;true;<br />var&nbsp;b = a.myColor();</p>","description":"<p><strong>Definition and Usage</strong></p><p>The prototype constructor allows you to add new properties and methods to JavaScript booleans.</p><p>When constructing a property, ALL booleans will be given the property, and its value, as default.</p><p>When constructing a method, ALL booleans will have this method available.</p><p><strong>Note:</strong>&nbsp;Boolean.prototype does not refer to a single boolean, but to the Boolean() object itself.</p><p><strong>Note:</strong>&nbsp;Prototype is a global object constructor which is available for all JavaScript objects.</p>","created":"2018-04-27T03:40:34.226Z"}]}